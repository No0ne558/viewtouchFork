#!/usr/bin/perl -w

# ------------------------------------------------------------------------
# Module:  dat2txt
# Description:  simple utility to convert ViewTouch .dat files into txt
#   format.  Gunzips them and Base64 decodes individual values.
# Author:  Bruce Alon King
# Modified:  Wed May  1 15:22:35 2002
# ------------------------------------------------------------------------


# ########################################################################
# INITIALIZATION AND GLOBAL VARIABLES
# ########################################################################
use strict;

my $srcdir  = `pwd`; chomp( $srcdir );
my $destdir = $srcdir . "/tmp";
my $DECODER_RING = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";


# ########################################################################
# MAIN LOOP
# ########################################################################
if ( !-d $destdir ) {
    system( "mkdir $destdir" );
}

my @filelist;
if ( $ARGV[0] =~ /^all$/i ) {
    shift( @ARGV );
    if ( opendir( DIR, $srcdir ) ) {
        my @files = readdir( DIR );
        closedir( DIR );
        foreach ( @files ) {
            next if ( /^\.\.?$/ );
            next if ( /\.bak\d*$/ );
            next if ( /\.txt$/ );
            my $file = $_;
            if ( $file =~ /\.dat$/ ) {
                push( @filelist, $_ );
            }
        }
    }
} else {
    push( @filelist, @ARGV );
    @filelist = grep( $_ !~ /\.bak\d*$/, @filelist );
    @filelist = grep( $_ !~ /\.txt$/, @filelist );
    
}

foreach ( @filelist ) {
    my $file = $_;
    unless ( -f $file ) {
        print "Skipping $file\n";
        next;
    }
    my $txtfile = "$destdir/$file.txt";
    my $decoded = "$destdir/$file.decoded";
    print "Processing $file\n";
    my $gzipped = `file $file`;
    if ( $gzipped =~ /gzip/ ) {
        system( "cat $file | gunzip > $txtfile" );
    } else {
        system( "cp $file $txtfile" );
    }
    if ( open( INFILE, $txtfile ) ) {
        if ( open( OUTFILE, ">" . $decoded ) ) {
            while ( <INFILE> ) {
                my $line = $_;
                chomp( $line );
                my @line = split( /\s+/, $line );
                my @newline;
                foreach ( @line ) {
                    my $in = $_;
                    my $out = $in;
                    if ( $in !~ /_/ ) {
                        $out = Decode( $in );
                    }
                    push( @newline, $out );
                }
                my $newline = join( " ", @newline );
                print OUTFILE $newline . "\n";
            }
            close( OUTFILE );
        } else {
            print STDERR "Could not write $decoded:  $!\n";
        }
        close( INFILE );
    } else {
        print STDERR "Could not read $txtfile:  $!\n";
    }
}


# ########################################################################
# SUBROUTINES
# ########################################################################

{
my @decoder_ring;
# --------------------------------------------------------------------
# InitDecoder:  initialize @decoder_ring with Base64 decoding
#   information
# --------------------------------------------------------------------
sub InitDecoder {
    my $len = length( $DECODER_RING );
    my $index = 0;
    foreach ( 0..255 ) {
        $decoder_ring[$_] = 0;
    }
    while ( $index < $len ) {
        my $decode_idx = ord( substr( $DECODER_RING, $index, 1 ) );
        $decoder_ring[$decode_idx] = $index;
        $index += 1;
    }
}
# --------------------------------------------------------------------
# Decode:  Apparently, the vt_data tokens are in Base64 format even
#   though Base64 requires units of 4 characters.  So maybe a
#   pseudo-Base64.
# --------------------------------------------------------------------
sub Decode {
    my ( $token ) = @_;
    my $retval = 0;
    my $len = length( $token );
    InitDecoder() unless ( @decoder_ring );
    foreach ( 1..$len ) {
        my $index = $_ - 1;
        my $char = substr( $token, $index, 1 );
        my $val = $decoder_ring[ord( $char )];
        $retval = ( $retval << 6 ) + $val;
    }
    return( $retval );
}
}

# ------------------------------------------------------------------------
# showHelp:
# ------------------------------------------------------------------------
sub showHelp {
    my ( $progname ) = $0 =~ m|/([^/]+)$|;
    print STDERR "Usage:  $progname <input file>\n";
    print STDERR "\n";
    exit( 1 );
}
