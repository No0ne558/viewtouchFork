#!/bin/sh

VTPATH=$1
VTPOS=`cat $VTPATH/bin/.vtpos_command`
VTRESTART=$VTPATH/dat/.restart_flag
FALLBACK_RESTART="/tmp/.viewtouch_restart_flag"

echo "ViewTouch restart script started"
echo "Waiting for restart flag: $VTRESTART"

# Set up signal handlers for graceful shutdown
cleanup_and_exit() {
    echo "Received shutdown signal, exiting restart script"
    exit 0
}

trap cleanup_and_exit SIGTERM SIGINT SIGHUP

# Function to check if system is shutting down
check_system_shutdown() {
    # Check if systemd is in shutdown state
    if [ -f /run/systemd/shutdown/scheduled ]; then
        return 0  # System is shutting down
    fi
    
    # Check if shutdown process is running
    if pgrep -f "shutdown.*-r\|reboot\|halt\|poweroff" > /dev/null; then
        return 0  # System is shutting down
    fi
    
    # Check if runlevel indicates shutdown
    if [ -x /sbin/runlevel ]; then
        RUNLEVEL=$(/sbin/runlevel | awk '{print $2}')
        if [ "$RUNLEVEL" = "0" ] || [ "$RUNLEVEL" = "6" ]; then
            return 0  # System is shutting down
        fi
    fi
    
    return 1  # System is not shutting down
}

# Wait for either the primary or fallback restart flag, but check for system shutdown
while [ ! -f "$VTRESTART" ] && [ ! -f "$FALLBACK_RESTART" ];
do
    # Check if system is shutting down
    if check_system_shutdown; then
        echo "System shutdown detected, exiting restart script"
        exit 0
    fi
    
    sleep 3
done

# Check one more time before proceeding
if check_system_shutdown; then
    echo "System shutdown detected before restart, exiting"
    exit 0
fi

# Remove whichever flag file exists
if [ -f "$VTRESTART" ]; then
    echo "Found primary restart flag, removing: $VTRESTART"
    rm "$VTRESTART"
elif [ -f "$FALLBACK_RESTART" ]; then
    echo "Found fallback restart flag, removing: $FALLBACK_RESTART"
    rm "$FALLBACK_RESTART"
fi

echo "Restarting ViewTouch with command: $VTPOS"
exec $VTPOS


