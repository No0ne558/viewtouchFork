#!/usr/bin/perl -w

# --------------------------------------------------------------------
# Module:  vt_install
# Description:  ViewTouch installer.
# Author:  Bruce Alon King
# Modified:  Fri Jan  7 20:36:22 PST 2005
# --------------------------------------------------------------------

# ####################################################################
# INITIALIZATION AND GLOBAL VARIABLES
# ####################################################################
use strict;
use Getopt::Std;

my $VTDIR       = "/usr/viewtouch";
my $VTBIN       = "$VTDIR/bin";
my $VTDAT       = "$VTDIR/dat";
my $VTBAKDIR    = "$VTDIR/backups";
my $VTINSTDIR   = "$VTDIR/installs";

my $sysname     = `uname`;  chomp( $sysname );
my $tar         = "tar xfC - /";
my $tarf        = "tar xCf /";
my $gunzip      = "gunzip";
my $uudecode    = "uudecode";
my $binsecname  = "viewtouch_binaries";
my $datsecname  = "viewtouch_data";

my $SYSSTR      = `hostname -s`; chomp( $SYSSTR );
my $DATESTR     = `date +"%b-%d-%Y-%H%M"`; chomp( $DATESTR );
my $TARFILE     = "viewtouch-backup-$SYSSTR-$DATESTR.tar.gz";

my $options = "ahklv";
my %opts;
getopts( $options, \%opts );
ShowHelp() if ( $opts{'h'} );

my $alsodat     = $opts{'a'} ? 1 : 0;
my $keepinstall = $opts{'k'} ? 1 : 0;
my $alsolangs   = $opts{'l'} ? 1 : 0;
my $alsovtdata  = $opts{'v'} ? 1 : 0;
if ( $ARGV[0] && ( $ARGV[0] eq "alsodat" )) {
    $alsodat = 1;
}

# ####################################################################
# MAIN LOOP
# ####################################################################

# first make sure ViewTouch is not running
IsRunning();

if ( ! -d $VTBAKDIR ) {
    mkdir( $VTBAKDIR, 0755 );
}
if ( ! -d $VTINSTDIR ) {
    mkdir( $VTINSTDIR, 0755 );
}

# backup the existing files
BackupExisting();

# install the new files
ExpandBinaries();

# install data files if requested
if ( $alsodat ) {
    ExpandData( 0 );
} elsif ( $alsovtdata || $alsolangs ) {
    ExpandData( $alsovtdata, $alsolangs );
}

# move this script to the install directory as .installed
unless ( $keepinstall ) {
    my $dest = "$VTINSTDIR/$0.installed";
    system( "mv $0 $dest" );
    system( "touch $dest" );
}


# ####################################################################
# SUBROUTINES
# ####################################################################

# --------------------------------------------------------------------
# ShowHelp:
# --------------------------------------------------------------------
sub ShowHelp {
    print "Usage:  $0 [OPTIONS] [alsodat]\n";
    print "OPTIONS:\n";
    print "  -a            Install all data.\n";
    print "  -h            Show this help screen.\n";
    print "  -k            Keep the install file, do not move it to the\n";
    print "                installed directory.\n";
    print "  -l            Install the dat/languages/ directory and files.\n";
    print "  -v            Install vt_data, but not the rest of the data files.\n";
    print "\n";
    print "The alsodat parameter tells the installer to also install the\n";
    print "ViewTouch data files.  It is the same as -a, but is kept around for\n";
    print "backwards compatibility.\n";
    print "\n";
    exit( 1 );
}

# --------------------------------------------------------------------
# IsRunning:  Verifies that ViewTouch is not active on the system.
# --------------------------------------------------------------------
sub IsRunning {
    my $VTRUNNING=`ps ax | grep vt_main | grep -v grep`;
    if ( $VTRUNNING ) {
        print "\n\nViewTouch is running.  Aborting install...\n\n";
        exit( 1 );
    }
}

# --------------------------------------------------------------------
# BackupExisting:
# --------------------------------------------------------------------
sub BackupExisting {
    system( "tar czf $VTBAKDIR/$TARFILE $VTBIN/* $VTDAT/*" );
}

# --------------------------------------------------------------------
# ExpandBinaries:
# --------------------------------------------------------------------
sub ExpandBinaries {
    my $foundbin = 0;
    if ( open( OUTFILE, "| $uudecode" ) ) {
        while ( <DATA> ) {
            last if ( $foundbin && /^\s*$/ );
            if ( $foundbin ) {
                print OUTFILE $_;
            } elsif ( /^BINFILE:$/ ) {
                $foundbin = 1;
            }
        }
        close( OUTFILE );
        system( "cat $binsecname | $gunzip | $tar" );
        unlink( $binsecname );
    }
}

# --------------------------------------------------------------------
# ExpandData:  Reads the DATA section looking for the vt_data
#  information.
# --------------------------------------------------------------------
sub ExpandData {
    my ( $onlyvtdata, $onlylanguages ) = @_;
    $onlyvtdata = 0 unless ( defined( $onlyvtdata ) );
    $onlylanguages = 0 unless ( defined( $onlylanguages ) );
    my $command = "| $uudecode";
    my $founddat = 0;
    if ( open( OUTFILE, $command ) ) {
        # uudecode the file
        while ( <DATA> ) {
            last if ( $founddat && /^\s*$/ );
            if ( $founddat ) {
                print OUTFILE $_;
            } elsif ( /^DATFILE:$/ ) {
                $founddat = 1;
            }
        }
        close( OUTFILE );

        # gunzip the file into a tarfile
        my $tarname = $datsecname . ".tar";
        system( "cat $datsecname | $gunzip > $tarname" );

        # determine the files to extract (all, vt_data, and/or languages)
        $command = $tarf . " " . $tarname;
        if ( $onlyvtdata ) {
            $command .= " usr/viewtouch/dat/vt_data";
        }
        if ( $onlylanguages ) {
            my @langs = `tar tf $tarname | grep /languages/`;
            chomp( @langs );
            $command .= " " . join( " ", @langs );
        }

        # extract and clean up
        system( $command );
        unlink( $datsecname );
        unlink( $tarname );
    }
}

# --------------------------------------------------------------------
# PrintChangeLog:
# --------------------------------------------------------------------
sub PrintChangeLog {
    my $have_change = 0;
    while ( <DATA> ) {
        if ( $have_change ) {
            print $_;
        } elsif ( /^CHANGELOG:$/ ) {
            $have_change = 1;
        }
    }
}


__DATA__
BINFILE:
!!!BINFILE!!!

DATFILE:
!!!DATFILE!!!

CHANGELOG:
!!!CHANGELOG!!!
